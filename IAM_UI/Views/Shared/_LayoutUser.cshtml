@using Newtonsoft.Json
@using System.Data
@using IAM_UI.Helpers
@inject LayoutProcessor LayoutProcessor
@inject IConfiguration Configuration


@{
    var LoginredirectCondition = true;
    var loginurl = Configuration.GetValue<string>("Data:LoginUrl");
    var SessionName = Configuration.GetValue<string>("Data:SessionName");
    var LoginSessionName = Configuration.GetValue<string>("Data:LoginSessionName");
    UserDetail UserDetail = null;


    Layout = null; // This ensures no layout is used for this view (if that's the intent)

    var loginData = Context.Session.GetString(LoginSessionName);

    ProcessingResult result = null;

    if (!string.IsNullOrEmpty(loginData))
    {
        LoginredirectCondition = false;
        loginurl = "";
        try
        {
            result = LayoutProcessor.ProcessLoginData(loginData);
        }
        catch (Exception ex)
        {
            // Handle or log the error
            Console.WriteLine($"Error processing login data: {ex.Message}");
        }

        ViewBag.CompanyList = result?.CompanyList;
        ViewBag.MenuItems = result?.MenuItems;
        ViewBag.UsertypeId = result?.UserTypeId;
        ViewBag.CompanyId = result?.CompanyId;
        ViewBag.UserTypeList = result?.UserTypes;
        ViewBag.UserDetail = result?.UserDetail;
        UserDetail = ViewBag.UserDetail as UserDetail;

        // Handle session data
        if (!string.IsNullOrEmpty(Context.Session.GetString(SessionName)))
        {
            UserDetail userData = JsonConvert.DeserializeObject<UserDetail>(Context.Session.GetString("UserData"));
            if (userData.CurrentCompanyId != ViewBag.CompanyId || userData.CurrentUserTypeId != ViewBag.UsertypeId)
            {
                // If "UserData" session exists, remove it and update it with new UserDetail
                Context.Session.Remove(SessionName);
                Context.Session.SetString(SessionName, JsonConvert.SerializeObject(UserDetail));
            }
        }
        else
        {
            // If no UserData in session, store UserDetail in session
            Context.Session.SetString(SessionName, JsonConvert.SerializeObject(UserDetail));
        }
    }

}


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="A fully featured admin theme which can be used to build CRM, CMS, etc." name="description" />
    <meta content="Coderthemes" name="author" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!-- App favicon -->
    <link rel="shortcut icon" href="~/assets/images/favicon.ico">

    <!-- Bootstrap css -->
    <link href="~/assets/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <!-- App css -->
    <link href="~/assets/css/app.min.css" rel="stylesheet" type="text/css" id="app-style" />
    <!-- icons -->
    <link href="~/assets/css/icons.min.css" rel="stylesheet" type="text/css" />


    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.min.css" rel="stylesheet">
    <!-- Head js -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.min.css" rel="stylesheet">
    <link href="~/assets/plugins/datatable/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.13.2/themes/smoothness/jquery-ui.css" rel="stylesheet" />
    <!-- Head js -->
    <script src="~/assets/js/head.js"></script>


    @RenderSection("dateStyle", false)



    <script>



        // Immediately redirect if condition is true
        var redirectCondition = @Html.Raw(Json.Serialize(LoginredirectCondition)); // Pass the C# condition to JavaScript
        var loginUrl = "@loginurl"; // Inject the C# variable loginurl into JavaScript

        if (redirectCondition) {
        // Redirect immediately, before rendering any content
        window.location.href = loginUrl;
        } 
    </script>

    @{
        // Retrieve actions list from the context
        var actions = Context.Items["Actions"] as List<string[]>;



        // Flatten the nested list into a single array
        var flatActions = actions?.SelectMany(a => a).ToList() ?? new List<string>();  // Handle null safely


        //This line is for  wizard type module which have two pages instead of modal
        var ViewClicked = Context.Session.GetString("ViewClicked");
        var a = 0;
    }

    <script>




        // Assuming `ViewBag.approval` is provided in the Razor ViewBag


         var ViewClicked = "@ViewClicked"


        $(document).ready(function () {
            // Pass the flattened actions list from Razor to JavaScript
            var flatActions = @Html.Raw(Json.Serialize(flatActions));  // Serialize the C# list to JSON and pass to JS

            // Check if "View" is in the array and handle click
            $(".View i").click(function () {
                // Disable the submit button when "View" is clicked
                $("span.ModalView").empty();
            });

            // Reverse the logic: Check if actions do not contain "Edit"
            if (flatActions.indexOf("Edit") === -1) {
                // If "Edit" is not in the array, empty the <span> tag with class "Edit"
                $("span.Edit").empty();
            } else if (flatActions.indexOf("Edit") >= 0) {
                $("span.Edit").show();
                 $("span.ModalView").show();
            }

            if (flatActions.indexOf("Add") === -1) {
                // If "Add" is not in the array, empty the <span> tag with class "Add"
                $("span.Add").empty();
            } else if (flatActions.indexOf("Add") >= 0) {
                $("span.Add").show();
            }

            if (flatActions.indexOf("Delete") === -1) {
                // If "Delete" is not in the array, empty the <span> tag with class "Delete"
                $("span.Delete").empty();
            } else if (flatActions.indexOf("Delete") >= 0) {
                $("span.Delete").show();
            }

            if (flatActions.indexOf("View") === -1) {
                // If "View" is not in the array, empty the <span> tag with class "View"
                $("span.View").empty();
            } else if (flatActions.indexOf("View") >= 0) {
                $("span.View").show();
            }

            if (flatActions.indexOf("Print") === -1) {
                // If "Print" is not in the array, empty the <span> tag with class "Print"
                $("span.Print").empty();
            } else if (flatActions.indexOf("Print") >= 0) {
                $("span.Print").show();
            }

            if (flatActions.indexOf("Approve") === -1) {
                // If "Approve" is not in the array, empty the <span> tag with class "Approve"
                $(".Approve").empty();
                $(".Approve").css("display", "none");
            }
            else if (flatActions.indexOf("Approve") >= 0) {
                $(".Approve").show();
            }

          if (ViewClicked === "View")
         {

        $("span.ModalView").empty();
          }
          else if (ViewClicked === "Edit")
         {

         $("span.ModalView").show();
          }
            else if (ViewClicked === "Add")
         {

         $("span.ModalView").show();
          }

        });


    </script>


  

</head>

<!-- body start -->
<body data-layout-mode="default" data-theme="light" data-topbar-color="dark" data-menu-position="fixed" data-leftbar-color="light" data-leftbar-size='default' data-sidebar-user='false'>

    <!-- Begin page -->
    <div id="wrapper">


        <!-- Topbar Start -->
        <div class="navbar-custom">
            <div class="navbar-custom">
                <div class="container-fluid">
                    <!-- Right Side Menu -->
                    @if (UserDetail != null)
                    {
                        if (UserDetail.UserCategoryId !=1){


                    <ul class="dropdown list-unstyled topnav-menu float-end mb-0">
                        <!-- Notification Icon -->
                        <li class="dropdown notification-list">
                            <a href="javascript:void(0);" class="nav-link right-bar-toggle waves-effect waves-light">
                                <i class="fe-settings noti-icon"></i>
                            </a>
                        </li>
                    </ul>

                    }
                    }

                    <!-- Admin Dropdown -->
                    <ul class="list-unstyled topnav-menu float-end mb-0">
                        <li class="dropdown">
                            <a class="nav-link dropdown-toggle nav-user me-0 waves-effect waves-light"
                               data-bs-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
                                <span class="pro-user-name ms-1">
                                    @if (UserDetail != null)
                                    {
                                        @UserDetail.FullName

                                        <i class="mdi mdi-chevron-down"></i>
                                    }
                                 
                                </span>
                            </a>
                            <div class="dropdown-menu dropdown-menu-end profile-dropdown">
                                <!-- Welcome Header -->
                                <div class="dropdown-header noti-title">
                                    <h6 class="text-overflow m-0">Welcome!</h6>
                                </div>

                                <!-- My Account Link -->
                                <a href="javascript:void(0);" class="dropdown-item notify-item">
                                    <i class="fe-user"></i>
                                    <span>My Account</span>
                                </a>

                                <!-- Change Password Link -->
                                <a href="/ChangePasswordUI/ForgetPassword" class="dropdown-item notify-item">
                                    <i class="fe-lock"></i>
                                    <span>Change Password</span>
                                </a>

                                <div class="dropdown-divider"></div>

                                <!-- Logout Link -->
                                <a href="javascript:void(0);" class="dropdown-item notify-item" onclick="logout()">
                                    <i class="fe-log-out"></i>
                                    <span>Logout</span>
                                </a>
                            </div>
                        </li>
                    </ul>

                    <!-- LOGO -->
                    <div class="logo-box">
                        <!-- Add your logo or branding here if needed -->
                    </div>

                    <!-- Left Side Menu -->
                    <ul class="list-unstyled topnav-menu topnav-menu-left m-0">
                        <li>
                            <button class="button-menu-mobile waves-effect waves-light">
                                <i class="fe-menu"></i>
                            </button>
                        </li>

                        <li>
                            <!-- Mobile menu toggle (Horizontal Layout) -->
                            <a class="navbar-toggle nav-link" data-bs-toggle="collapse" data-bs-target="#topnav-menu-content">
                                <div class="lines">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                            </a>
                            <!-- End mobile menu toggle -->
                        </li>
                    </ul>

                    <div class="clearfix"></div>
                </div>
            </div>
        </div>
        <!-- end Topbar -->
        <!-- ========== Left Sidebar Start ========== -->
        <div class="left-side-menu" style="overflow-y: scroll">


            <!--- Sidemenu -->
           @if( !string.IsNullOrEmpty(loginData)){
             <Partial name="_PertialMenu" /> 
           }
            <!-- End Sidebar -->
            <!-- Sidebar -left -->

        </div>
        <!-- Left Sidebar End -->
        <!-- ============================================================== -->
        <!-- Start Page Content here -->
        <!-- ============================================================== -->

        <div class="content-page">
            <div class="content">
                @RenderBody()
            </div> <!-- content -->
            <!-- Footer Start -->
            <footer class="footer">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-6">
                            <script>document.write(new Date().getFullYear())</script> &copy; Technocon Group
                        </div>
                        <div class="col-md-6">
                            <div class="text-md-end footer-links d-none d-sm-block">
                                <a href="javascript:void(0);">About Us</a>
                                <a href="javascript:void(0);">Help</a>
                                <a href="javascript:void(0);">Contact Us</a>
                            </div>
                        </div>
                    </div>
                </div>
            </footer>
            <!-- end Footer -->

        </div>

        <!-- ============================================================== -->
        <!-- End Page content -->
        <!-- ============================================================== -->


    </div>
    <!-- END wrapper -->
    <!-- Right Sidebar -->
    <div class="right-bar">
        <div data-simplebar class="h-100">
            <!-- Tab panes -->
            <div class="tab-content pt-0">
                <div class="tab-pane active" id="settings-tab" role="tabpanel">
                    <h6 class="fw-medium px-3 m-0 py-2 font-13 text-uppercase bg-light">
                        <span class="d-block py-1">User Settings</span>
                    </h6>

                    <div class="p-3">



                        <!-- Menu positions -->
                        <h6 class="fw-medium font-14 mt-4 mb-2 pb-1">Company List</h6>

                        <form id="CompanyItems">
                            @if (ViewBag.CompanyList != null)
                            {
                                foreach (var Company in ViewBag.CompanyList)
                                {
                                    var isChecked = Company.CompanyId == ViewBag.CompanyId;
                                    <div class="form-check form-switch mb-1">
                                        <input type="radio"
                                               class="form-check-input"
                                               name="CompanyItems"
                                               value="@Company.CompanyId"
                                               id="companyitem-@Company.CompanyId"
                                        @(isChecked ? "checked" : "") />
                                        <label class="form-check-label" for="companyitem-@Company.CompanyId">@Company.COMPANY_NAME</label>
                                    </div>
                                }
                            }
                        </form>

                        <!-- User Type -->
                        <h6 class="fw-medium font-14 mt-4 mb-2 pb-1">User Type</h6>
                        <form id="userTypeForm">
                            @if (ViewBag.UserTypeList != null)
                            {
                                foreach (var userType in ViewBag.UserTypeList)
                                {
                                    var isChecked = userType.UserTypeId == ViewBag.UsertypeId;
                                    <div class="form-check form-switch mb-1">
                                        <input type="radio"
                                               class="form-check-input"
                                               name="userTypeIds"
                                               value="@userType.UserTypeId"
                                               id="userType-@userType.UserTypeId"
                                        @(isChecked ? "checked" : "") />
                                        <label class="form-check-label" for="userType-@userType.UserTypeId">@userType.UserType</label>
                                    </div>
                                }
                            }
                        </form>

                    </div>
                </div>
            </div>

        </div> <!-- end slimscroll-menu-->
    </div>
    <!-- /Right-bar -->
    <!-- Right bar overlay-->
    <div class="rightbar-overlay"></div>

    <!-- Vendor js -->
    <script src="~/assets/js/vendor.min.js"></script>

    <!-- Plugins js -->
    <script src="~/assets/libs/jquery-mask-plugin/jquery.mask.min.js"></script>
    <script src="~/assets/libs/autonumeric/autoNumeric.min.js"></script>

    <!-- Init js-->
    <script src="~/assets/js/pages/form-masks.init.js"></script>
    <script src="~/assets/plugins/datatable/js/jquery.dataTables.min.js"></script>
    <script src="~/assets/plugins/datatable/js/dataTables.bootstrap5.min.js"></script>

    <!-- App js -->
    <script src="~/assets/js/app.min.js"></script>
    <!-- SweetAlert2 CDN (CSS and JS) -->

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.all.min.js"></script>

    @RenderSection("dateScript", false)
</body>
</html>







<script>

   





    $('#CompanyItems input[type="radio"]').on('change', function () {
        // Capture the selected values
        var selectedCompany = $(this).val();
        var selectedUserType = $('#userTypeForm input[name="userTypeIds"]:checked').val();

        // Ensure both values are selected
        if (selectedCompany && selectedUserType) {
            // Call the C# method via GET
            $.get('/Home/ChangeCompanyUserType', {
                companyId: selectedCompany,     // First parameter
                userTypeId: selectedUserType    // Second parameter
            }, function (response) {
                // Handle success
                console.log(response.message);
                if (response.message === 'success') {
                    window.location.href = '/Home/Dashboard';
                    //swal.fire("Error", "Rompany & Role changed successfully!!", "success");


                } else {
                    swal.fire("Error", "please contact admin !!", "error");
                }
            }).fail(function (xhr, status, error) {
                // Handle AJAX request failure
                Swal.fire({
                    icon: 'error',
                    title: 'Request Failed',
                    text: 'There was an error processing your request.',
                    showConfirmButton: true
                });
            });
        } else {
            // Handle case when either company or user type is missing
            Swal.fire({
                icon: 'error',
                title: 'Missing Data',
                text: 'Please select both company and user type.',
                showConfirmButton: true
            });
        }
    });


    $('#userTypeForm input[type="radio"]').on('change', function () {
        // Capture the selected values
        var selectedCompany = $('#CompanyItems input[name="CompanyItems"]:checked').val();
        var selectedUserType = $(this).val();

        // Ensure both values are selected
        if (selectedCompany && selectedUserType) {
            // Call the C# method via GET
            $.get('/Home/ChangeCompanyUserType', {
                companyId: selectedCompany,     // First parameter
                userTypeId: selectedUserType    // Second parameter
            }, function (response) {
                // Handle success
                console.log(response.message);
                if (response.message === 'success') {
                    window.location.href = '/Home/Dashboard';
                    // swal.fire("Error", "Rompany & Role changed successfully!!", "success");


                } else {
                    swal.fire("Error", "please contact admin !!", "error");
                }
            }).fail(function (xhr, status, error) {
                // Handle AJAX request failure
                Swal.fire({
                    icon: 'error',
                    title: 'Request Failed',
                    text: 'There was an error processing your request.',
                    showConfirmButton: true
                });
            });
        } else {
            // Handle case when either company or user type is missing
            Swal.fire({
                icon: 'error',
                title: 'Missing Data',
                text: 'Please select both company and user type.',
                showConfirmButton: true
            });
        }
    });





    function logout() {
        Swal.fire({
            title: 'Are you sure?',
            text: "You will be logged out and all data will be cleared.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, logout!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/Home/Logout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json(); // Parse the JSON response
                        } else {
                            throw new Error('Logout failed.');
                        }
                    })
                    .then(data => {
                        // Redirect the user
                        window.location.href = data.redirectUrl;
                    })
                    .catch(error => {
                        console.error('Error during logout:', error);
                        Swal.fire('Error', 'There was an error logging you out.', 'error');
                    });
            }
        });
    }












    var approval = @Html.Raw(Json.Serialize(ViewBag.approval));
    function sendtoapproval(rowid, moduleid) {
    console.log("Sending data for row:", rowid, "and module:", moduleid);

    // Construct the URL with query parameters
    const url = `/Home/SendToApproval?RowId=${rowid}&ModuleId=${moduleid}`;

    // Perform the AJAX GET request
    $.ajax({
    url: url,               // The URL to send the request to
    type: 'GET',            // HTTP method (GET)
    dataType: 'json',       // Expected response data type (JSON)
    success: function (data) {
    console.log(data);
    if (data > 0) {



    Swal.fire({
    title: "Done",
    text: "Send For Approval Successfully !!",
    icon: "success",
    timer: 3000, // 3 seconds
    showConfirmButton: false // Remove the "OK" button
    }).then(function () {
    window.location.reload();
    });





    }
    else {
    swal.fire("Oppss!!!", "Please Contact Admin", "error");
    }


    },
    error: function (error) {
    console.error("Error sending data:", error);
    }
    });
    }





</script>











<script>

    function GetHeadList(CompanyKey, UserTypeKey, EmployeeMasterKey) {

    var jsonData = {
    Rec_Type: "COUNT_MODULE",
    EmployeeId: EmployeeMasterKey,
    User_Type_Key: UserTypeKey,
    Mast_Hrd_Draft_Personnel_Key: 0,
    Company_Key: CompanyKey
    }
    $.post({
    url: '/Home/GetHeadList', // Replace with your actual API endpoint
    data: { model: jsonData },
    success: function (response) {

    $('#param1Element').text(response.count);
    console.log(response.count);
    // Trigger a custom event or any mechanism to notify the Dashboard page


    //window.location.href = "/TenantCompanyProfile/Dashboard?param1=" + response.count + "&param2=" + response.company;
    // Handle the success response
    //console.log('Success:', response);
    },
    error: function (error) {

    }
    });
    }

    function ApproveReject(RecType, RowId, ModuleId) {
    $.post("/Home/ApproveReject",
    {
    Rec_Type: RecType,
    Row_Id: RowId,
    ModuleId: ModuleId
    },
    function (d) {
    console.log(d);
    if (d > 0) {
    var msg = "";
    if (RecType === 'Accept') {
    msg = "Approved SuccessFully !!";

    }
    else if (RecType === 'Reject') {
    msg = "Rejected SuccessFully !!";
    }
    Swal.fire({
    title: "Done",
    text: msg,
    icon: "success",
    timer: 3000, // 3 seconds
    showConfirmButton: false // Remove the "OK" button
    }).then(function () {
    window.location.reload();
    });

    }
    else {
    swal.fire("Oppss!!!", "Please Contact Admin", "error");
    }


    // Show the modal
    //$("#AllowanceHead").modal('show');

    });
    }
</script>










@{
    var Approval = Context.Items["ApprovalModule"] as string;
    ViewBag.approval = null;
    if (Approval != null)
    {
        ViewBag.approval = JsonConvert.DeserializeObject<ApprovalList>(Approval);

    }



    string jsonDataTable = Context.Items["RowWiseApprovalDataTable"] as string;
}




<script>


     // Assuming `ViewBag.approval` is provided in the Razor ViewBag
        var approval = @Html.Raw(Json.Serialize(ViewBag.approval));

        if (!approval ) {
            // Iterate over all rows in the table
            $("span.Approval").empty();
        }
        else{
             $("span.Approval").show();
        }











    // Parse the JSON string safely
    var dataTable = @Html.Raw(jsonDataTable ?? "[]");



        function updateApprovalButtons() {
        // Iterate through rows in the dataTable
        dataTable.forEach(function (row) {
            var rowId = row.RowId; // Ensure this matches the JSON structure
            var finalApprovalStatusKey = row.FinalApprovalStatusKey;
            var approvalDesc = row.ApprovalDesc;
            var reason = row.Reason;

            // Find all buttons with the class 'approvalbutton' (inside spans)
            $('.approvaltable .approvalbutton').each(function () {
                var button = $(this);

                // Get the rowId from the button's onclick function
                var onclickValue = button.attr('onclick');
                var rowIdFromButton = onclickValue && onclickValue.match(/sendtoapproval\((\d+),/);

                if (rowIdFromButton && rowIdFromButton[1] == rowId) {
                    // Find the parent span of the button
                    var approvalSpan = button.closest('.Approval');

                    if (approvalSpan.length) {
                        // Find the parent <tr> element containing the approvalSpan
                        var parentRow = approvalSpan.closest('tr');

                        if (parentRow.length) {
                            // Determine the badge color based on FinalApprovalStatusKey
                            var badgeClass = 'bg-info'; // Default color

                            switch (finalApprovalStatusKey) {
                                case 1:
                                    badgeClass = 'bg-success'; // Approved
                                    break;
                                case 2:
                                    badgeClass = 'bg-danger'; // Rejected
                                    break;
                                case 3:
                                    badgeClass = 'bg-warning'; // Partly Approved
                                    break;
                                case 4:
                                    badgeClass = 'bg-primary'; // Initiated
                                    break;
                                default:
                                    badgeClass = 'bg-secondary'; // Default color for unknown statuses
                                    break;
                            }

                            if (finalApprovalStatusKey == 1 || finalApprovalStatusKey == 2) {
                                approvalSpan.show();
                                approvalSpan.append(`<span class="badge ${badgeClass}">${approvalDesc}</span>`);
                            } else {
                                // Insert the approval description inside the badge
                                approvalSpan.show();
                                approvalSpan.html(`<span class="badge ${badgeClass}">${approvalDesc}</span>`);

                                // Find and empty the Edit and Delete spans within the parent <tr>
                                parentRow.find('span.Edit').html(''); // Empty the Edit span
                                parentRow.find('span.Delete').html(''); // Empty the Delete span
                            }

                            // If the status is 'Rejected' (status key = 2), append an icon to open the modal
                            if (finalApprovalStatusKey == 2) {
                                var iconHtml = `<i class="fas fa-info-circle rejectreasonbtn" style="cursor:pointer;" data-row-id="${rowId}"></i>`;
                                approvalSpan.append(iconHtml);
                            }
                        }
                    }
                }
            });
        });
    }

    // Update modal content when the reject reason icon is clicked
    $(document).ready(function() {
        updateApprovalButtons();

        // Open the modal and update its content based on the clicked icon
        $(document).on('click', '.rejectreasonbtn', function() {
            var rowId = $(this).data('row-id');
            var reason = dataTable.find(row => row.RowId === rowId).Reason;  // Get the reason based on rowId

            // Dynamically create and add the modal HTML to the page
            var modalHtml = `
                <div class="modal fade" id="reasonModal-${rowId}" tabindex="-1" role="dialog" aria-labelledby="reasonModalLabel-${rowId}" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="reasonModalLabel-${rowId}">Reason for Rejection</h5>
                                <button type="button" class="close" data-dismiss="modal"  onclick="location.reload();" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <p>${reason}</p>
                            </div>
                            <div class="modal-footer">
                             <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="location.reload();">Close</button>

                            </div>
                        </div>
                    </div>
                </div>
            `;

            // Append the modal HTML to the body
            $('body').append(modalHtml);

            // Show the modal
            $(`#reasonModal-${rowId}`).modal('show');

            // Remove the modal from DOM after it's closed to avoid duplicate modals
            $(`#reasonModal-${rowId}`).on('hidden.bs.modal', function () {
                $(this).remove();
            });
        });
    });

        $(".AddButton").click(function() {
        console.log("Button was clicked!");
          $('#OperationalMode').val(2);

          $.post('/Home/SetAction', { key: 'OperationalMode', value: $('#OperationalMode').val() })
                                .done(function (response) {
                                    console.log(key + ' updated successfully:', response);






                                })
                                .fail(function (xhr, status, error) {
                                    console.error('Error updating ' + key + ':', error);
                                });


    });
    $(".EditButton").click(function() {
        console.log("Button was clicked!");
          $('#OperationalMode').val(3);

          $.post('/Home/SetAction', { key: 'OperationalMode', value: $('#OperationalMode').val() })
                                .done(function (response) {
                                    console.log(key + ' updated successfully:', response);






                                })
                                .fail(function (xhr, status, error) {
                                    console.error('Error updating ' + key + ':', error);
                                });


    });
    $(".DeleteButton").click(function() {
        console.log("Button was clicked!");
          $('#OperationalMode').val(3);

          $.post('/Home/SetAction', { key: 'OperationalMode', value: $('#OperationalMode').val() })
                                .done(function (response) {
                                    console.log(key + ' updated successfully:', response);






                                })
                                .fail(function (xhr, status, error) {
                                    console.error('Error updating ' + key + ':', error);
                                });


    });
    $(".ViewButton").click(function() {
        console.log("Button was clicked!");
          $('#OperationalMode').val(4);

          $.post('/Home/SetAction', { key: 'OperationalMode', value: $('#OperationalMode').val() })
                                .done(function (response) {
                                    console.log(key + ' updated successfully:', response);






                                })
                                .fail(function (xhr, status, error) {
                                    console.error('Error updating ' + key + ':', error);
                                });


    });
    $(".PrintButton").click(function() {
        console.log("Button was clicked!");
          $('#OperationalMode').val(4);

          $.post('/Home/SetAction', { key: 'OperationalMode', value: $('#OperationalMode').val() })
                                .done(function (response) {
                                    console.log(key + ' updated successfully:', response);






                                })
                                .fail(function (xhr, status, error) {
                                    console.error('Error updating ' + key + ':', error);
                                });


    });


</script>